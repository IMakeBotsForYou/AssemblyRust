arr db, 'zyxwvutsrqponmlkjihgfedcba', 255

find_length:
   inc BX            ; Increment counter
   cmp [arr+BX], 255 ; Compare to array-termination-character (set to 255)
   jne find_length   ; Go back if haven't found terminating character
   print BX, [arr]   ; Print N (length of array) bytes
   dec BX            ; Decrease length counter by 1 for ease of access later
   mov DX, 0         ; XOR DX, DX
   jmp while_outer   ; Start loop

while_outer:
   cmp DX, BX    ; Compare i (outer index) to length of array
   je exit       ; If we reached the end of the array in the outer loop, finish
   inc DX        ; Increment i (outer index)
   mov CX, 65535 ; -1 

while_inner:
   inc CX         ; Increment j (inner index)
   cmp CX, BX     ; Compare index to length of array
   je while_outer ; If we reached the end of the array, go back to the outer loop

   mov AX, WORD PTR [arr+CX] ; More current and next item to AX for ease of access
   cmp AL, AH      ; Compare current and next item
   jl flip_two     ; If we need to flip, flip
   jbe while_inner ; If not, go back to loop
 
flip_two:
  mov [arr+CX], AL   ; AH = First item, AL = second item
  mov [arr+CX+1], AH ; Flip their order
  jmp while_inner    ; Go back to loop

exit:
   inc BX   ; Bring BX back to its original size
   print BX, char [arr] ; Print N (length of array) bytes